let token_to_string = function
    | Parser.EOF -> "EOF"
    | Parser.COMMA -> "COMMA"
    | Parser.SEMICOLON -> "SEMICOLON"
    | Parser.LPAR -> "LPAR"
    | Parser.RPAR -> "RPAR"
    | Parser.LBRA -> "LBRA"
    | Parser.RBRA -> "RBRA"
    | Parser.LSQR -> "LSQR"
    | Parser.RSQR -> "RSQR"
    | Parser.ASSIGN -> "ASSIGN"
    | Parser.AND -> "AND"
    | Parser.OR -> "OR"
    | Parser.EQ -> "EQ"
    | Parser.NEQ -> "NEQ"
    | Parser.LT -> "LT"
    | Parser.LE -> "LE"
    | Parser.GT -> "GT"
    | Parser.GE -> "GE"
    | Parser.PLUS -> "PLUS"
    | Parser.MINUS -> "MINUS"
    | Parser.MUL -> "MUL"
    | Parser.DIV -> "DIV"
    | Parser.MOD -> "MOD"
    | Parser.NOT -> "NOT"
    | Parser.AMP -> "AMP"
    | Parser.PPLUS -> "PPLUS"
    | Parser.MMINUS -> "MMINUS"
    | Parser.TBOOL -> "TBOOL"
    | Parser.TINT -> "TINT"
    | Parser.TVOID -> "TVOID"
    | Parser.IF -> "IF"
    | Parser.ELSE -> "ELSE"
    | Parser.FOR -> "FOR"
    | Parser.WHILE -> "WHILE"
    | Parser.CONTINUE -> "CONTINUE"
    | Parser.BREAK -> "BREAK"
    | Parser.RETURN -> "RETURN"
    | Parser.SIZEOF -> "SIZEOF"
    | Parser.NULL -> "NULL"
    | Parser.TRUE -> "TRUE"
    | Parser.FALSE -> "FALSE"
    | Parser.INT x -> Format.sprintf "INT(%d)" x
    | Parser.IDENT s -> Format.sprintf "IDENT(%s)" s
    | Parser.INCLUDE s -> Format.sprintf "INCLUDE(%s)" s
